/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 * ---
 * Hint: You can use the debug stream to print initialTX and initialTY, if Thor seems not follow your orders.
 **/

class Point {

    constructor(x,y){
        this.x =x;
        this.y =y;
    }


    EuclidianDistance(B) {
        var dist = Math.sqrt((B.x - this.x)*(B.x - this.x) + (B.y - this.y)*(B.y - this.y));
        return dist;
    }

}


var inputs = readline().split(' ');
var lightX = parseInt(inputs[0]); // the X position of the light of power
var lightY = parseInt(inputs[1]); // the Y position of the light of power
var initialTX = parseInt(inputs[2]); // Thor's starting X position
var initialTY = parseInt(inputs[3]); // Thor's starting Y position



printErr("position lightX " +lightX);
printErr("position lightY "+lightY);

printErr("Position initialTX " +initialTX);
printErr("Position initialTY " +initialTY);


// game loop
var X = initialTX;
var Y = initialTY;
var direction = "";


while (true) {
    printErr("X = " + X + ", Y = " + Y);
    var remainingTurns = parseInt(readline());
    if (X < lightX && Y < lightY) {
        direction = "SE";
        Y = Y +1;
        X = X + 1;
    }
    else if (X < lightX && Y > lightY) {
        direction = "NE";
        Y = Y - 1;
        X = X+1;
    }
    else if (X > lightX && Y < lightY) {
        direction = "SW";
        Y = Y + 1;
        X = X - 1;
    }
    else if (X > lightX && Y > lightY) {
        direction = "NW";
        Y = Y - 1;
        X = X - 1;
    }
    else if (X < lightX && Y == lightY){
        direction = "E";
        X = X + 1;
    }
    else if (Y > lightY && X == lightX){
        direction = "N";
        Y = Y - 1;
    }
    else if(X > lightX && Y == lightY){
        direction = "W";
        X = X - 1;
    }
    else if(X == lightX && Y < lightY){
        direction = "S";
        Y = Y + 1;
    }
    print(direction);

}
